services:
  webapp:
    build:
      context: ./webapp
    image: gadgetgrove-webapp:${IMAGE_TAG:-latest}
    ports:
      - "8000:8000" # FastAPI
      - "8050:8050" # Dash
    volumes:
      - ./webapp:/app
      - logs:/var/log/webapp
    environment:
      DD_SERVICE: gadgetgrove-webapp
      DD_VERSION: ${IMAGE_TAG:-latest}
      DD_AGENT_HOST: ${DD_AGENT_HOST}
      DD_LOGS_INJECTION: true
      DD_RUM_CLIENT_TOKEN: ${DD_RUM_CLIENT_TOKEN}
      DD_RUM_APPLICATION_ID: ${DD_RUM_APPLICATION_ID}
      DD_RUM_SITE: ${DD_RUM_SITE}

      RABBITMQ_HOST: ${RABBITMQ_HOST}
      RABBITMQ_PORT: ${RABBITMQ_PORT}
      RABBITMQ_QUEUE: ${RABBITMQ_QUEUE}

      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}

      WEBAPP_URL: ${WEBAPP_URL}
      MAX_WORKERS: ${MAX_WORKERS:-10}
    depends_on:
      - rabbitmq
      - postgres-db
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: "1g"
    labels:
      com.datadoghq.ad.logs: '[{"source": "python", "service": "gadgetgrove-webapp"}]'
      com.datadoghq.tags.service: gadgetgrove-webapp
      com.datadoghq.tags.version: ${IMAGE_TAG:-latest}

  # Celery worker for traffic generation tasks
  celery-traffic:
    image: gadgetgrove-webapp:${IMAGE_TAG:-latest}
    command: ddtrace-run celery -A gadget_celery.app worker --loglevel=info --queues=traffic_generation --concurrency=6
    volumes:
      - ./webapp:/app
      - logs:/var/log/celery-traffic
    environment:
      DD_SERVICE: gadgetgrove-celery-traffic
      DD_VERSION: ${IMAGE_TAG:-latest}
      DD_AGENT_HOST: ${DD_AGENT_HOST}
      DD_LOGS_INJECTION: true

      RABBITMQ_HOST: ${RABBITMQ_HOST}
      RABBITMQ_PORT: ${RABBITMQ_PORT}

      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}

      WEBAPP_URL: ${WEBAPP_URL}
      MAX_WORKERS: ${MAX_WORKERS:-10}
    depends_on:
      rabbitmq:
        condition: service_healthy
      webapp:
        condition: service_started
    deploy:
      resources:
        limits:
          cpus: "0.8"
          memory: "2g"
    labels:
      com.datadoghq.ad.logs: '[{"source": "python", "service": "gadgetgrove-celery-traffic"}]'
      com.datadoghq.tags.service: gadgetgrove-celery-traffic
      com.datadoghq.tags.version: ${IMAGE_TAG:-latest}

  # Celery beat scheduler to trigger periodic tasks
  celery-beat:
    image: gadgetgrove-webapp:${IMAGE_TAG:-latest}
    command: ddtrace-run celery -A gadget_celery.app beat --loglevel=info
    volumes:
      - ./webapp:/app
      - logs:/var/log/celery-beat
    environment:
      DD_SERVICE: gadgetgrove-celery-beat
      DD_VERSION: ${IMAGE_TAG:-latest}
      DD_AGENT_HOST: ${DD_AGENT_HOST}
      DD_LOGS_INJECTION: true

      RABBITMQ_HOST: ${RABBITMQ_HOST}
      RABBITMQ_PORT: ${RABBITMQ_PORT}
    depends_on:
      rabbitmq:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: "0.3"
          memory: "256m"
    labels:
      com.datadoghq.ad.logs: '[{"source": "python", "service": "gadgetgrove-celery-beat"}]'
      com.datadoghq.tags.service: gadgetgrove-celery-beat
      com.datadoghq.tags.version: ${IMAGE_TAG:-latest}

  # Raw data consumer for RabbitMQ events
  raw-consumer:
    image: gadgetgrove-webapp:${IMAGE_TAG:-latest}
    command: ddtrace-run python3 consumer.py
    volumes:
      - ./webapp:/app
      - data-landing:/data/raw
      - logs:/var/log/consumer
    environment:
      DD_SERVICE: gadgetgrove-consumer
      DD_VERSION: ${IMAGE_TAG:-latest}
      DD_AGENT_HOST: ${DD_AGENT_HOST}
      DD_LOGS_INJECTION: true

      RABBITMQ_HOST: ${RABBITMQ_HOST}
      RABBITMQ_PORT: ${RABBITMQ_PORT}
      RABBITMQ_QUEUE: ${RABBITMQ_QUEUE}

    depends_on:
      rabbitmq:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: "512m"
    labels:
      com.datadoghq.ad.logs: '[{"source": "python", "service": "gadgetgrove-consumer"}]'
      com.datadoghq.tags.service: gadgetgrove-consumer
      com.datadoghq.tags.version: ${IMAGE_TAG:-latest}

  # RabbitMQ server
  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
      - logs:/var/log/rabbitmq
    user: "999:999"
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: "1g"
    labels:
      com.datadoghq.ad.check_names: '["rabbitmq"]'
      com.datadoghq.ad.init_configs: "[{}]"
      com.datadoghq.ad.instances: |
        [
          {
            "url": "http://%%host%%:15672",
            "username": "guest",
            "password": "guest",
            "rabbitmq_api_url": "http://%%host%%:15672/api/"
          }
        ]

  # Postgres database
  postgres-db:
    image: postgres:15
    command: -c config_file=/etc/postgresql/postgresql.conf
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - logs:/var/log/postgres
      - ./postgres/custom.conf:/etc/postgresql/postgresql.conf:ro
      - ./postgres/init-scripts:/docker-entrypoint-initdb.d
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      DATADOG_PG_PASSWORD: ${DATADOG_PG_PASSWORD}
      PREFECT_DB: ${PREFECT_DB}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: "2.0"
          memory: "2g"
    labels:
      com.datadoghq.ad.logs: '[{"source": "postgresql", "service": "postgres"}]'
      com.datadoghq.tags.service: postgres
      com.datadoghq.ad.check_names: '["postgres"]'
      com.datadoghq.ad.init_configs: "[{}]"
      com.datadoghq.ad.instances: |
        [
          {
            "host": "%%host%%",
            "port": 5432,
            "username": "datadog",
            "password": "%%env_DATADOG_PG_PASSWORD%%",
            "dbname": "postgres",
            "dbm": true,
            "collect_function_metrics": true,
            "collect_count_metrics": true,
            "collect_database_size_metrics": true,
            "collect_default_database": true,
            "tags": ["service:postgres"],
            "database_autodiscovery": {
              "enabled": true
            },
            "agent_jobs": {
              "enabled": true,
              "collection_interval": 15,
              "history_row_limit": 10000
            },
            "schemas_collection": {
              "enabled": true
            },
            "include_index_usage_metrics": true,
            "deadlocks_collection": {
              "enabled": true
            }
          }
        ]

  wait-for-prefect-db:
    image: postgres:15
    command: bash -c "/check-prefect-db.sh"
    volumes:
      - ./postgres/check-prefect-db.sh:/check-prefect-db.sh
    depends_on:
      postgres-db:
        condition: service_healthy
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PREFECT_DB: ${PREFECT_DB}
    labels:
      com.datadoghq.ad.logs: '[{"source": "postgresql", "service": "wait-for-prefect-db"}]'
      com.datadoghq.tags.service: wait-for-prefect-db

  spark-master:
    image: bitnami/spark:3.5.5
    ports:
      - "7077:7077"
      - "8080:8080"
    volumes:
      - ./spark/jobs:/opt/spark/jobs
      - data-landing:/data
      - logs:/var/log/spark-master
      - ./spark/conf/spark-defaults.conf:/opt/bitnami/spark/conf/spark-defaults.conf
    environment:
      SPARK_MODE: master
      SPARK_REST_API_ENABLED: "true"
      SPARK_MASTER_WEBUI_PORT: 8080
      DD_LOGS_INJECTION: true
      DD_AGENT_HOST: ${DD_AGENT_HOST}
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: "2g"
    labels:
      com.datadoghq.ad.logs: '[{"source": "spark", "service": "spark-master"}]'
      com.datadoghq.tags.service: spark-master
      com.datadoghq.ad.check_names: '["spark"]'
      com.datadoghq.ad.init_configs: "[{}]"
      com.datadoghq.ad.instances: |
        [
          {
            "cluster_name": "gadgetgrove-spark",
            "spark_url": "%%host%%:8080"
          }
        ]

  spark-worker:
    image: bitnami/spark:3.5.5
    depends_on:
      - spark-master
    ports:
      - "8081:8081"
    volumes:
      - data-landing:/data
      - logs:/var/log/spark-worker
      - ./spark/conf/spark-defaults.conf:/opt/bitnami/spark/conf/spark-defaults.conf
    environment:
      DD_LOGS_INJECTION: true
      SPARK_MODE: worker
      SPARK_MASTER_URL: ${SPARK_MASTER_URL}
      DD_AGENT_HOST: ${DD_AGENT_HOST}
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: "2g"
    labels:
      com.datadoghq.ad.logs: '[{"source": "spark", "service": "spark-worker"}]'
      com.datadoghq.tags.service: spark-worker

  # Prefect server
  prefect-server:
    image: gadgetgrove-prefect-agent:${IMAGE_TAG:-latest}
    command: ddtrace-run prefect server start
    ports:
      - "4200:4200"
    volumes:
      - ./prefect:/app/prefect
      - logs:/var/log/prefect-server
      - ./prefect/check_api.py:/check_api.py
    environment:
      DD_SERVICE: prefect-server
      DD_VERSION: ${IMAGE_TAG:-latest}
      DD_AGENT_HOST: ${DD_AGENT_HOST}
      DD_LOGS_INJECTION: true

      PREFECT_API_URL: ${PREFECT_API_URL}
      PREFECT_SERVER_API_HOST: ${PREFECT_SERVER_API_HOST}
      PREFECT_UI_API_URL: ${PREFECT_UI_API_URL}
      PREFECT_API_DATABASE_CONNECTION_URL: ${PREFECT_API_DATABASE_CONNECTION_URL}
      PREFECT_DB: ${PREFECT_DB}
      PREFECT_LOGGING_FORMATTERS_JSON_FORMAT: ${PREFECT_LOGGING_FORMATTERS_JSON_FORMAT}

    depends_on:
      wait-for-prefect-db:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "ddtrace-run", "python3", "/app/prefect/check_api.py"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: "1g"
    labels:
      com.datadoghq.ad.logs: '[{"source": "python", "service": "prefect-server"}]'
      com.datadoghq.tags.service: prefect-server
      com.datadoghq.tags.version: ${IMAGE_TAG:-latest}

  prefect-agent:
    image: gadgetgrove-prefect-agent:${IMAGE_TAG:-latest}
    build:
      context: .
      dockerfile: ./prefect/agent.Dockerfile
      args:
        POSTGRES_JDBC_VERSION: ${POSTGRES_JDBC_VERSION}
    environment:
      DD_SERVICE: prefect-agent
      DD_VERSION: ${IMAGE_TAG:-latest}
      DD_AGENT_HOST: ${DD_AGENT_HOST}
      DD_LOGS_INJECTION: true

      WORK_POOL: ${WORK_POOL}
      SPARK_MASTER_URL: ${SPARK_MASTER_URL}
      SPARK_SCRIPT: ${SPARK_SCRIPT}
      PREFECT_API_URL: ${PREFECT_API_URL}

      DBT_PROFILES_DIR: ${DBT_PROFILES_DIR}

      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}

      RABBITMQ_HOST: ${RABBITMQ_HOST}
      RABBITMQ_PORT: ${RABBITMQ_PORT}
      RABBITMQ_QUEUE: ${RABBITMQ_QUEUE}
    depends_on:
      prefect-server:
        condition: service_healthy
    volumes:
      - data-landing:/data
      - logs:/var/log/prefect-agent
      - ./spark/conf/spark-defaults.conf:/opt/bitnami/spark/conf/spark-defaults.conf
    healthcheck:
      test: ["CMD", "echo", "healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: on-failure
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: "512m"
    labels:
      com.datadoghq.ad.logs: '[{"source": "python", "service": "prefect-agent"}]'
      com.datadoghq.tags.service: prefect-agent
      com.datadoghq.tags.version: ${IMAGE_TAG:-latest}

  init:
    image: gadgetgrove-webapp:${IMAGE_TAG:-latest}
    command: init/run.sh
    user: root
    depends_on:
      postgres-db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      prefect-server:
        condition: service_healthy
    volumes:
      - ./webapp:/app
      - ./prefect:/app/prefect
      - ./data:/app/data
      - logs:/var/log/init
    environment:
      DD_SERVICE: gadgetgrove-init
      DD_VERSION: ${IMAGE_TAG:-latest}
      DD_LOGS_INJECTION: true
      DD_AGENT_HOST: ${DD_AGENT_HOST}
      WORK_POOL: ${WORK_POOL}
      PREFECT_API_URL: ${PREFECT_API_URL}

      RABBITMQ_HOST: ${RABBITMQ_HOST}
      RABBITMQ_PORT: ${RABBITMQ_PORT}
      RABBITMQ_QUEUE: ${RABBITMQ_QUEUE}
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: "512m"
    labels:
      com.datadoghq.tags.service: gadgetgrove-init
      com.datadoghq.tags.version: ${IMAGE_TAG:-latest}

  # Datadog Agent
  datadog-agent:
    image: gcr.io/datadoghq/agent:7
    # entrypoint: sh -c "agent integration install -w /tmp/datadog_prefect-1.0.0-py3-none-any.whl --allow-root && agent run"
    pid: "host"
    security_opt:
      - apparmor:unconfined
    cap_add:
      - SYS_ADMIN
      - SYS_RESOURCE
      - SYS_PTRACE
      - NET_ADMIN
      - NET_BROADCAST
      - NET_RAW
      - IPC_LOCK
      - CHOWN
    volumes:
      - /var/run/datadog:/var/run/datadog
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /proc/:/host/proc/:ro
      - /sys/fs/cgroup/:/host/sys/fs/cgroup:ro
      - /etc/os-release:/host/etc/os-release:ro
      - /etc/passwd:/host/etc/passwd:ro
      - /etc/group:/host/etc/group:ro
      - /:/host/root:ro
      - /sys/kernel/debug:/host/sys/kernel/debug
      # - ./datadog/datadog_prefect-1.0.0-py3-none-any.whl:/tmp/datadog_prefect-1.0.0-py3-none-any.whl
      # - ./datadog/prefect.yaml:/etc/datadog-agent/conf.d/prefect.d/conf.yaml
    environment:
      #  Agent configuration
      DD_API_KEY: ${DD_API_KEY}
      DD_SITE: ${DD_SITE}
      DD_ENV: ${DD_ENV}
      DD_HOSTNAME: ${DD_HOSTNAME}
      HOSTNAME: ${HOSTNAME}
      DD_HOSTNAME_TRUST_UTS_NAMESPACE: true

      #  Logs configuration
      DD_LOGS_ENABLED: true
      DD_LOGS_INJECTION: true
      DD_LOGS_CONFIG_AUTO_MULTI_LINE_DETECTION: true
      DD_LOGS_CONFIG_AUTO_MULTI_LINE_DEFAULT_MATCH_THRESHOLD: 0.5
      DD_LOGS_CONFIG_CONTAINER_COLLECT_ALL: true
      DD_CONTAINER_EXCLUDE: "image:datadog/agent"

      #  APM configuration
      DD_APM_ENABLED: true
      DD_PROFILING_ENABLED: true
      DD_RUNTIME_METRICS_ENABLED: true
      DD_APM_NON_LOCAL_TRAFFIC: ${DD_APM_NON_LOCAL_TRAFFIC}
      DD_DOGSTATSD_NON_LOCAL_TRAFFIC: ${DD_DOGSTATSD_NON_LOCAL_TRAFFIC}
      DD_DOGSTATSD_SOCKET: ${DD_DOGSTATSD_SOCKET}
      DD_APM_RECEIVER_SOCKET: ${DD_APM_RECEIVER_SOCKET}

    privileged: true
    dns:
      - 8.8.8.8
      - 8.8.4.4
    healthcheck:
      test: ["CMD", "agent", "health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: "1.5g"

networks:
  default:
    name: gadgetgrove-net

volumes:
  data-landing:
  postgres-data:
  rabbitmq-data:
  logs:
