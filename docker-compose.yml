services:
  webapp:
    build:
      context: ./webapp
    image: gadgetgrove-webapp:latest
    ports:
      - "8000:8000" # FastAPI
      - "8050:8050" # Dash
    volumes:
      - ./webapp:/app
      - logs:/var/log/webapp
    environment:
      DD_SERVICE: ${DD_SERVICE:-gadgetgrove-webapp}
      DD_VERSION: ${DD_VERSION:-1.0.0}
      DD_AGENT_HOST: ${DD_AGENT_HOST:-datadog-agent}
      DD_LOGS_INJECTION: true

      RABBITMQ_HOST: ${RABBITMQ_HOST:-rabbitmq}
      RABBITMQ_PORT: ${RABBITMQ_PORT:-5672}
      RABBITMQ_QUEUE: ${RABBITMQ_QUEUE:-event_queue}

      POSTGRES_HOST: ${POSTGRES_HOST:-postgres-db}
      POSTGRES_PORT: ${POSTGRES_PORT:-5432}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-events}

      WEBAPP_URL: ${WEBAPP_URL:-http://webapp:8000}
      MAX_WORKERS: ${MAX_WORKERS:-10}
    depends_on:
      - rabbitmq
      - postgres-db
    labels:
      com.datadoghq.ad.logs: '[{"source": "python", "service": "gadgetgrove-webapp"}]'
      com.datadoghq.tags.env: ${DD_ENV:-podman}
      com.datadoghq.tags.service: ${DD_SERVICE:-gadgetgrove-webapp}
      com.datadoghq.tags.version: ${DD_VERSION:-1.0.0}

  # Celery worker for traffic generation tasks
  celery-traffic:
    image: gadgetgrove-webapp:latest
    command: ddtrace-run celery -A gadget_celery.app worker --loglevel=info --queues=traffic_generation --concurrency=6
    volumes:
      - ./webapp:/app
      - logs:/var/log/celery-traffic
    environment:
      DD_SERVICE: ${DD_SERVICE:-gadgetgrove-celery-traffic}
      DD_VERSION: ${DD_VERSION:-1.0.0}
      DD_AGENT_HOST: ${DD_AGENT_HOST:-datadog-agent}
      DD_LOGS_INJECTION: true

      RABBITMQ_HOST: ${RABBITMQ_HOST:-rabbitmq}
      RABBITMQ_PORT: ${RABBITMQ_PORT:-5672}

      POSTGRES_HOST: ${POSTGRES_HOST:-postgres-db}
      POSTGRES_PORT: ${POSTGRES_PORT:-5432}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-events}

      WEBAPP_URL: ${WEBAPP_URL:-http://webapp:8000}
      MAX_WORKERS: ${MAX_WORKERS:-10}
    depends_on:
      - rabbitmq
      - webapp
    labels:
      com.datadoghq.ad.logs: '[{"source": "python", "service": "gadgetgrove-celery-traffic"}]'
      com.datadoghq.tags.env: ${DD_ENV:-podman}
      com.datadoghq.tags.service: ${DD_SERVICE:-gadgetgrove-celery-traffic}
      com.datadoghq.tags.version: ${DD_VERSION:-1.0.0}

  # Celery beat scheduler to trigger periodic tasks
  celery-beat:
    image: gadgetgrove-webapp:latest
    command: ddtrace-run celery -A gadget_celery.app beat --loglevel=info
    volumes:
      - ./webapp:/app
      - logs:/var/log/celery-beat
    environment:
      DD_SERVICE: ${DD_SERVICE:-gadgetgrove-celery-beat}
      DD_VERSION: ${DD_VERSION:-1.0.0}
      DD_AGENT_HOST: ${DD_AGENT_HOST:-datadog-agent}
      DD_LOGS_INJECTION: true

      RABBITMQ_HOST: ${RABBITMQ_HOST:-rabbitmq}
      RABBITMQ_PORT: ${RABBITMQ_PORT:-5672}
    depends_on:
      rabbitmq:
        condition: service_healthy
    labels:
      com.datadoghq.ad.logs: '[{"source": "python", "service": "gadgetgrove-celery-beat"}]'
      com.datadoghq.tags.env: ${DD_ENV:-podman}
      com.datadoghq.tags.service: ${DD_SERVICE:-gadgetgrove-celery-beat}
      com.datadoghq.tags.version: ${DD_VERSION:-1.0.0}

  # Raw data consumer for RabbitMQ events
  raw-consumer:
    image: gadgetgrove-webapp:latest
    command: ddtrace-run python consumer.py
    volumes:
      - ./webapp:/app
      - data-landing:/data/raw
      - logs:/var/log/consumer
    environment:
      DD_SERVICE: ${DD_SERVICE:-gadgetgrove-consumer}
      DD_VERSION: ${DD_VERSION:-1.0.0}
      DD_AGENT_HOST: ${DD_AGENT_HOST:-datadog-agent}
      DD_LOGS_INJECTION: true

      RABBITMQ_HOST: ${RABBITMQ_HOST:-rabbitmq}
      RABBITMQ_PORT: ${RABBITMQ_PORT:-5672}
      RABBITMQ_QUEUE: ${RABBITMQ_QUEUE:-event_queue}

    depends_on:
      rabbitmq:
        condition: service_healthy
    labels:
      com.datadoghq.ad.logs: '[{"source": "python", "service": "gadgetgrove-consumer"}]'
      com.datadoghq.tags.env: ${DD_ENV:-podman}
      com.datadoghq.tags.service: ${DD_SERVICE:-gadgetgrove-consumer}
      com.datadoghq.tags.version: ${DD_VERSION:-1.0.0}

  # RabbitMQ server
  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
      - logs:/var/log/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 10s
      retries: 5
    labels:
      com.datadoghq.ad.logs: '[{"source": "rabbitmq", "service": "rabbitmq"}]'
      com.datadoghq.tags.env: ${DD_ENV:-podman}
      com.datadoghq.tags.service: ${DD_SERVICE:-rabbitmq}
      com.datadoghq.tags.version: ${DD_VERSION:-1.0.0}
      com.datadoghq.ad.checks: |
        {
          "rabbitmq": {
            "instances": [
              {
                "url": "http://%%host%%:15672",
                "username": "guest",
                "password": "guest",
                "rabbitmq_api_url": "http://%%host%%:15672/api/"
              }
            ]
          }
        }

  # Postgres database
  postgres-db:
    image: postgres:15
    command: -c config_file=/etc/postgresql/postgresql.conf
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - logs:/var/log/postgres
      - ./postgres/custom.conf:/etc/postgresql/postgresql.conf:ro
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-events}
      DATADOG_PG_PASSWORD: ${DATADOG_PG_PASSWORD:-datadog_password}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    labels:
      com.datadoghq.ad.logs: '[{"source": "postgresql", "service": "postgres"}]'
      com.datadoghq.tags.env: ${DD_ENV:-podman}
      com.datadoghq.tags.service: ${DD_SERVICE:-postgres}
      com.datadoghq.tags.version: ${DD_VERSION:-1.0.0}
      com.datadoghq.ad.checks: >-
        {
          "postgres": {
            "init_config": {},
            "instances": [
              {
                "host": "%%host%%",
                "port": 5432,
                "username": "datadog",
                "password": "${DATADOG_PG_PASSWORD}",
                "dbname": "postgres",
                "dbm": true,
                "collect_function_metrics": true,
                "collect_count_metrics": true,
                "collect_database_size_metrics": true,
                "collect_default_database": true,
                "tags": ["service:postgres"],
                "database_autodiscovery": {
                  "enabled": true
                },
                "agent_jobs": {
                  "enabled": true,
                  "collection_interval": 15,
                  "history_row_limit": 10000,
                },
                "schemas_collection": {
                  "enabled": true,
                },
                "include_index_usage_metrics": true,
                "deadlocks_collection": {
                  "enabled": true,
                }
              }
            ]
          }
        }

  spark-master:
    image: bitnami/spark:3.5
    ports:
      - "7077:7077"
      - "8080:8080"
    volumes:
      - ./spark/jobs:/opt/spark/jobs
      - data-landing:/data
      - logs:/var/log/spark-master
    environment:
      SPARK_MODE: master
      SPARK_REST_API_ENABLED: "true"
      SPARK_MASTER_WEBUI_PORT: 8080
      DD_LOGS_INJECTION: true
    labels:
      com.datadoghq.ad.logs: '[{"source": "spark", "service": "spark-master"}]'
      com.datadoghq.tags.env: ${DD_ENV:-podman}
      com.datadoghq.tags.service: ${DD_SERVICE:-spark-master}
      com.datadoghq.tags.version: ${DD_VERSION:-1.0.0}
      com.datadoghq.ad.checks: >-
        {
          "spark": {
            "init_config": {},
            "instances": [
              {
                "cluster_name": "gadgetgrove-spark",
                "spark_url": "%%host%%:8080",
              }
            ]
          }
        }

  spark-worker:
    image: bitnami/spark:3.5
    depends_on:
      - spark-master
    volumes:
      - data-landing:/data
      - logs:/var/log/spark-worker
    environment:
      DD_LOGS_INJECTION: true
      SPARK_MODE: worker
      SPARK_MASTER_URL: ${SPARK_MASTER_URL:-spark://spark-master:7077}
    labels:
      com.datadoghq.ad.logs: '[{"source": "spark", "service": "spark-worker"}]'
      com.datadoghq.tags.env: ${DD_ENV:-podman}
      com.datadoghq.tags.service: ${DD_SERVICE:-spark-worker}
      com.datadoghq.tags.version: ${DD_VERSION:-1.0.0}

  # Prefect server
  prefect-server:
    image: gadgetgrove-prefect-agent:latest
    command: ddtrace-run prefect server start
    ports:
      - "4200:4200"
    volumes:
      - ./prefect:/app/prefect
      - logs:/var/log/prefect-server
      - ./prefect/check_api.py:/check_api.py
    environment:
      DD_SERVICE: ${DD_SERVICE:-prefect-server}
      DD_VERSION: ${DD_VERSION:-1.0.0}
      DD_AGENT_HOST: ${DD_AGENT_HOST:-datadog-agent}
      DD_LOGS_INJECTION: true

      PREFECT_API_URL: ${PREFECT_API_URL:-http://prefect-server:4200/api}
      PREFECT_SERVER_API_HOST: ${PREFECT_SERVER_API_HOST:-0.0.0.0}
      PREFECT_UI_API_URL: ${PREFECT_UI_API_URL:-http://localhost:4200/api}
      PREFECT_API_DATABASE_CONNECTION_URL: ${PREFECT_API_DATABASE_CONNECTION_URL:-postgresql+asyncpg://postgres:postgres@postgres-db:5432/prefect}
      PREFECT_DB: ${PREFECT_DB:-prefect}

    depends_on:
      postgres-db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "ddtrace-run", "python", "/check_api.py"]
      interval: 10s
      timeout: 5s
      retries: 5
    labels:
      com.datadoghq.ad.logs: '[{"source": "prefect", "service": "prefect-server"}]'
      com.datadoghq.tags.env: ${DD_ENV:-podman}
      com.datadoghq.tags.service: ${DD_SERVICE:-prefect-server}
      com.datadoghq.tags.version: ${DD_VERSION:-1.0.0}

  prefect-agent:
    build:
      context: .
      dockerfile: ./prefect/agent.Dockerfile
      args:
        POSTGRES_JDBC_VERSION: ${POSTGRES_JDBC_VERSION:-42.7.3}
    image: gadgetgrove-prefect-agent:latest
    environment:
      DD_SERVICE: ${DD_SERVICE:-prefect-agent}
      DD_VERSION: ${DD_VERSION:-1.0.0}
      DD_AGENT_HOST: ${DD_AGENT_HOST:-datadog-agent}
      DD_LOGS_INJECTION: true

      WORK_POOL: ${WORK_POOL:-default-agent-pool}
      SPARK_MASTER_URL: ${SPARK_MASTER_URL:-spark://spark-master:7077}
      SPARK_SCRIPT: ${SPARK_SCRIPT:-/opt/spark/jobs/process_logs.py}
      PREFECT_API_URL: ${PREFECT_API_URL:-http://prefect-server:4200/api}

      DBT_PROFILES_DIR: ${DBT_PROFILES_DIR:-/opt/dbt}

      POSTGRES_HOST: ${POSTGRES_HOST:-postgres-db}
      POSTGRES_PORT: ${POSTGRES_PORT:-5432}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-events}
      POSTGRES_JDBC_VERSION: ${POSTGRES_JDBC_VERSION:-42.7.3}

      RABBITMQ_HOST: ${RABBITMQ_HOST:-rabbitmq}
      RABBITMQ_PORT: ${RABBITMQ_PORT:-5672}
      RABBITMQ_QUEUE: ${RABBITMQ_QUEUE:-event_queue}
    depends_on:
      - prefect-server
    volumes:
      - data-landing:/data
      - logs:/var/log/prefect-agent
    healthcheck:
      test: ["CMD", "echo", "healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      com.datadoghq.ad.logs: '[{"source": "prefect", "service": "prefect-agent"}]'
      com.datadoghq.tags.env: ${DD_ENV:-podman}
      com.datadoghq.tags.service: ${DD_SERVICE:-prefect-agent}
      com.datadoghq.tags.version: ${DD_VERSION:-1.0.0}

  init:
    image: gadgetgrove-webapp:latest
    command: init/run.sh
    user: root
    depends_on:
      postgres-db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      prefect-server:
        condition: service_started
    volumes:
      - ./webapp:/app
      - ./prefect:/app/prefect
      - ./data:/app/data
      - logs:/var/log/init
    environment:
      DD_SERVICE: ${DD_SERVICE:-gadgetgrove-init}
      DD_VERSION: ${DD_VERSION:-1.0.0}
      DD_LOGS_INJECTION: true
      WORK_POOL: ${WORK_POOL:-default-agent-pool}
      PREFECT_API_URL: ${PREFECT_API_URL:-http://prefect-server:4200/api}

      POSTGRES_HOST: ${POSTGRES_HOST:-postgres-db}
      POSTGRES_PORT: ${POSTGRES_PORT:-5432}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-events}
      DATADOG_PG_PASSWORD: ${DATADOG_PG_PASSWORD:-datadog_password}

      RABBITMQ_HOST: ${RABBITMQ_HOST:-rabbitmq}
      RABBITMQ_PORT: ${RABBITMQ_PORT:-5672}
      RABBITMQ_QUEUE: ${RABBITMQ_QUEUE:-event_queue}

      PREFECT_DB: ${PREFECT_DB:-prefect}
    labels:
      com.datadoghq.tags.env: ${DD_ENV:-podman}
      com.datadoghq.tags.service: ${DD_SERVICE:-gadgetgrove-init}
      com.datadoghq.tags.version: ${DD_VERSION:-1.0.0}

  # Datadog Agent
  datadog-agent:
    image: gcr.io/datadoghq/agent:7
    pid: "host"
    ports:
      - 5002:5002
    volumes:
      - /var/run/datadog:/var/run/datadog
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /proc/:/host/proc/:ro
      - /sys/fs/cgroup/:/host/sys/fs/cgroup:ro
      - /etc/os-release:/host/etc/os-release:ro
    environment:
      DD_API_KEY: ${DD_API_KEY}
      DD_SITE: ${DD_SITE:-datadoghq.com}
      DD_ENV: ${DD_ENV:-podman}
      DD_SERVICE: ${DD_SERVICE:-gadgetgrove}
      DD_VERSION: ${DD_VERSION:-1.0.0}
      DD_HOSTNAME: ${DD_HOSTNAME:-gadgetgrove}
      HOSTNAME: ${HOSTNAME:-gadgetgrove}
      DD_HOSTNAME_TRUST_UTS_NAMESPACE: true
      DD_APM_ENABLED: true
      DD_LOGS_ENABLED: true
      DD_LOGS_INJECTION: true
      DD_LOGS_CONFIG_AUTO_MULTI_LINE_DETECTION: true
      DD_LOGS_CONFIG_CONTAINER_COLLECT_ALL: true
      DD_PROFILING_ENABLED: true
      DD_RUNTIME_METRICS_ENABLED: true
      DD_APM_NON_LOCAL_TRAFFIC: ${DD_APM_NON_LOCAL_TRAFFIC:-true}
      DD_DOGSTATSD_NON_LOCAL_TRAFFIC: ${DD_DOGSTATSD_NON_LOCAL_TRAFFIC:-true}
      DD_DOGSTATSD_SOCKET: ${DD_DOGSTATSD_SOCKET:-/var/run/datadog/dsd.socket}
      DD_APM_RECEIVER_SOCKET: ${DD_APM_RECEIVER_SOCKET:-/var/run/datadog/apm.socket}
      DD_GUI_PORT: 5002
    privileged: true
    dns:
      - 8.8.8.8
      - 8.8.4.4
    healthcheck:
      test: ["CMD", "agent", "health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  data-landing:
  postgres-data:
  rabbitmq-data:
  logs:
